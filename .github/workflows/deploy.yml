name: deploy
on:
  workflow_call:
    secrets:
      aws-account-id:
        description: 'AWS account ID to use'
        required: false
      aws-role-arn:
        description: 'AWS IAM role to assume by GitHub action runner'
        required: false
      aws-region:
        description: 'AWS Region'
        required: false
      aws-ecr-repo:
        description: 'ECR repository to push image to'
        required: false
      fly-org-name:
        description: 'Fly.io organisation name'
        required: false
      fly-app-name:
        description: 'Fly.io application name'
        required: false
      fly-api-token:
        description: 'API Token for Fly.io'
        required: false
    inputs:
      image-tag:
        description: 'The locally tagged docker image to push to Fly.io'
        required: true
        type: string

jobs:
  proceed:
    name: Determine if deploy is needed
    outputs:
      ecs: ${{ steps.determine-ecs.outputs.ecs }}
      fly: ${{ steps.determine-fly.outputs.fly }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - id: determine-ecs
        run: |
          if [[ -z "${AWS_ROLE_ARN}" || -z "${AWS_ACCOUNT_ID}" ]]; then
            echo '::set-output name=ecs::false';
          elif [[ -z "${AWS_ECR_REPO}" || -z "${AWS_REGION}" ]]; then
            echo '::set-output name=ecs::false';
          else
            echo '::set-output name=ecs::true';
          fi
        env:
          AWS_ACCOUNT_ID: ${{ secrets.aws-account-id }}
          AWS_ROLE_ARN: ${{ secrets.aws-role-arn }}
          AWS_REGION: ${{ secrets.aws-region }}
          AWS_ECR_REPO: ${{ secrets.aws-ecr-repo }}
      - id: determine-fly
        run: |
          if [[ -z "${FLY_APP_NAME}" || -z "${FLY_ORG_NAME}" ]]; then
            echo '::set-output name=fly::false';
          elif [[ -z "${FLY_API_TOKEN}" ]]; then
            echo '::set-output name=fly::false';
          else
            echo '::set-output name=fly::true';
          fi
        env:
          FLY_APP_NAME: ${{ secrets.fly-app-name }}
          FLY_ORG_NAME: ${{ secrets.fly-org-name }}
          FLY_API_TOKEN: ${{ secrets.fly-api-token }}

  ecs:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: ECS
    needs: [proceed]
    if: needs.proceed.outputs.ecs == 'true'
    uses: ./.github/workflows/aws-deploy.yml
    secrets:
      aws-account-id: ${{ secrets.aws-account-id }}
      cicd-role: ${{ secrets.aws-role-arn }}
      aws-region: ${{ secrets.aws-region }}
      ecr-repository: ${{ secrets.aws-ecr-repo }}
    with:
      ecs-cluster-name: 'cluster-application-server'
      ecs-service-name: 'application-server'
      ecs-container-name: 'app'
      codedeploy-application: 'AppECS-cluster-application-server'
      codedeploy-deployment-group: 'DgpECS-cluster-application-server'
      image-tag: ${{ inputs.image-tag }}

  fly:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: Fly.io
    needs: [proceed]
    if: needs.proceed.outputs.fly == 'true'
    uses: ./.github/workflows/fly-deploy.yml
    secrets:
      app-name: ${{ secrets.fly-app-name }}
      fly-api-token: ${{ secrets.fly-api-token }}
    with:
      image-tag: ${{ inputs.image-tag }}
