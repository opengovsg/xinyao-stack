name: üöÄ Deploy
on:
  push: {}
  pull_request: {}

jobs:
  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: üî¨ Lint
        run: npm run lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: üîé Type check
        run: npm run typecheck --if-present

  vitest:
    name: ‚ö° Vitest
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: ‚ö° Run vitest
        run: npm run test -- --coverage

  cypress:
    name: ‚ö´Ô∏è Cypress
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: üèÑ Copy test env vars
        run: cp .env.example .env

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: üê≥ Docker compose
        # the sleep is just there to give time for postgres to get started
        run: docker-compose up -d && sleep 3
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/postgres'

      - name: üõ† Setup Database
        run: npx prisma migrate reset --force

      - name: ‚öôÔ∏è Build
        run: npm run build

      - name: üå≥ Cypress run
        uses: cypress-io/github-action@v4
        with:
          start: npm run start:mocks
          wait-on: 'http://localhost:8811'
        env:
          PORT: '8811'

  proceed-staging:
    name: Determine if deploy is needed
    outputs:
      ecs: ${{ steps.determine-ecs.outputs.ecs }}
      fly: ${{ steps.determine-fly.outputs.fly }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - id: determine-ecs
        run: |
          if [[ -z "${AWS_ROLE_ARN_STAGING}" || -z "${AWS_ACCOUNT_ID_STAGING}" ]]; then
            echo '::set-output name=ecs::false';
          elif [[ -z "${ECR_REPO}" || -z "${AWS_REGION}" ]]; then
            echo '::set-output name=ecs::false';
          else
            echo '::set-output name=ecs::true';
          fi
        env:
          AWS_ACCOUNT_ID_STAGING: ${{ secrets.AWS_ACCOUNT_ID_STAGING }}
          AWS_ROLE_ARN_STAGING: ${{ secrets.AWS_ROLE_ARN_STAGING }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPO: ${{ secrets.ECR_REPO }}
      - id: determine-fly
        run: |
          if [[ -z "${APP_NAME_STAGING}" || -z "${ORG_NAME_STAGING}" ]]; then
            echo '::set-output name=fly::false';
          elif [[ -z "${FLY_API_TOKEN}" ]]; then
            echo '::set-output name=fly::false';
          else
            echo '::set-output name=fly::true';
          fi
        env:
          APP_NAME_STAGING: ${{ secrets.APP_NAME_STAGING }}
          ORG_NAME_STAGING: ${{ secrets.ORG_NAME_STAGING }}
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  proceed-production:
    name: Determine if deploy is needed
    outputs:
      ecs: ${{ steps.determine-ecs.outputs.ecs }}
      fly: ${{ steps.determine-fly.outputs.fly }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - id: determine-ecs
        run: |
          if [[ -z "${AWS_ROLE_ARN_PROD}" || -z "${AWS_ACCOUNT_ID_PROD}" ]]; then
            echo '::set-output name=ecs::false';
          elif [[ -z "${ECR_REPO}" || -z "${AWS_REGION}" ]]; then
            echo '::set-output name=ecs::false';
          else
            echo '::set-output name=ecs::true';
          fi
        env:
          AWS_ACCOUNT_ID_PROD: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          AWS_ROLE_ARN_PROD: ${{ secrets.AWS_ROLE_ARN_PROD }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPO: ${{ secrets.ECR_REPO }}
      - id: determine-fly
        run: |
          if [[ -z "${APP_NAME_PROD}" || -z "${ORG_NAME_PROD}" ]]; then
            echo '::set-output name=fly::false';
          elif [[ -z "${FLY_API_TOKEN}" ]]; then
            echo '::set-output name=fly::false';
          else
            echo '::set-output name=fly::true';
          fi
        env:
          APP_NAME_PROD: ${{ secrets.APP_NAME_PROD }}
          ORG_NAME_PROD: ${{ secrets.ORG_NAME_PROD }}
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  build-docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{steps.extract-tag.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
      - name: Extract tag
        id: extract-tag
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ghactions-${BRANCH}-${SHA})"
        env:
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
      - if: github.repository == 'opengovsg/xinyao-stack'
        run: npm install
      - run: docker build -t ${{ steps.extract-tag.outputs.tag }} -f Dockerfile .

  deploy-ecs-staging:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: Deploy to ECS Staging
    needs: [lint, typecheck, vitest, cypress, proceed-staging, build-docker]
    if: needs.proceed-staging.outputs.ecs == 'true' && github.ref_name == 'staging'
    uses: ./.github/workflows/aws-deploy.yml
    secrets:
      aws-account-id: ${{ secrets.AWS_ACCOUNT_ID_STAGING }}
      cicd-role: ${{ secrets.AWS_ROLE_ARN_STAGING }}
      ecr-repository: ${{ secrets.ECR_REPO }}
    with:
      aws-region: 'ap-southeast-1'
      ecs-cluster-name: 'cluster-application-server'
      ecs-service-name: 'application-server'
      ecs-container-name: 'app'
      codedeploy-application: 'AppECS-cluster-application-server'
      codedeploy-deployment-group: 'DgpECS-cluster-application-server'
      image-tag: ${{ needs.build-docker.outputs.tag }}

  deploy-ecs-production:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: Deploy to ECS Production
    needs: [lint, typecheck, vitest, cypress, proceed-production, build-docker]
    if: needs.proceed-production.outputs.ecs == 'true' && github.ref_name == 'production'
    uses: ./.github/workflows/aws-deploy.yml
    secrets:
      aws-account-id: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
      cicd-role: ${{ secrets.AWS_ROLE_ARN_PROD }}
      ecr-repository: ${{ secrets.ECR_REPO }}
    with:
      aws-region: 'ap-southeast-1'
      ecs-cluster-name: 'cluster-application-server'
      ecs-service-name: 'application-server'
      ecs-container-name: 'app'
      codedeploy-application: 'AppECS-cluster-application-server'
      codedeploy-deployment-group: 'DgpECS-cluster-application-server'
      image-tag: ${{ needs.build-docker.outputs.tag }}

  deploy-fly-staging:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: Deploy to Fly.io Staging
    needs: [lint, typecheck, vitest, cypress, proceed-staging, build-docker]
    if: needs.proceed-staging.outputs.fly == 'true' && github.ref_name == 'staging'
    uses: ./.github/workflows/fly-deploy.yml
    secrets:
      app-name: ${{ secrets.APP_NAME_STAGING }}
      fly-api-token: ${{ secrets.FLY_API_TOKEN }}
    with:
      image-tag: ${{ needs.build-docker.outputs.tag }}

  deploy-fly-production:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: Deploy to Fly.io Production
    needs: [lint, typecheck, vitest, cypress, proceed-production, build-docker]
    if: needs.proceed-production.outputs.fly == 'true' && github.ref_name == 'production'
    uses: ./.github/workflows/fly-deploy.yml
    secrets:
      app-name: ${{ secrets.APP_NAME_PROD }}
      fly-api-token: ${{ secrets.FLY_API_TOKEN }}
    with:
      image-tag: ${{ needs.build-docker.outputs.tag }}
